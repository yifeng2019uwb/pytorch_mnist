# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics


  test:
    name: Python ${{ matrix.python-version }} tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          # python -m pip install .[test]
          # python -m pip install pytest-github-actions-annotate-failures

          # - name: pytest
          #   run: python -m pytest -v tests
      - name: Display the path
        run: |
        shell: python {0}

  mypy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.x
      - name: Install mypy
        run: python -m pip install mypy
      - name: mypy
        run: python -m mypy --ignore-missing-imports semantic_release

  beautify:
    name: Beautify
    runs-on: ubuntu-latest
    needs: [test, mypy]
    outputs:
      new_sha: ${{ steps.sha.outputs.SHA }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Format code
        run: |
          python -m pip install black
          python -m black .
      - name: Sort imports
        run: |
          python -m pip install isort
          python -m isort -y -rc semantic_release tests
      - name: Commit and push changes
        uses: github-actions-x/commit@v2.5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'style: improve code formatting'
          name: github-actions
          email: action@github.com
 

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [test, mypy, beautify]
    if: github.repository == 'relekang/python-semantic-release'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ needs.beautify.outputs.new_sha }}
    - name: Fetch master
      run: git fetch --prune origin +refs/heads/master:refs/remotes/origin/master
    - name: Python Semantic Release
      uses: ./
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pypi_username: ${{ secrets.PYPI_USERNAME }}
        pypi_password: ${{ secrets.PYPI_PASSWORD }}


  # docker-build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build docker image
  #       run: docker build . -t project_name

  #     - name: Test image
  #       run: |
  #         docker run --rm -d --name test_container -p 8000:8000 project_name
  #         docker run --link test_container:test_container waisbrot/wait
  #         curl --fail http://localhost:8000




